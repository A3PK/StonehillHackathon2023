
#include <AFMotor.h>
#define Echo A0
#define Trig A1
#define motor 10
#define Speed 40
#define spoint 103

float d;
char value;
int distance;
int Left;
int Right;
int L = 0;
int R = 0;
int L1 = 0;
int R1 = 0;

AF_DCMotor M1(1);
AF_DCMotor M3(3);
void setup() {
  Serial.begin(9600);
  pinMode(Trig, OUTPUT);
  pinMode(Echo, INPUT);
  
  M1.setSpeed(Speed);
  M3.setSpeed(Speed);
}
void loop() {
  //Obstacle();
  //Bluetoothcontrol();
  voicecontrol();
}

//This is the bluetooth controller code for manual RC movement
void Bluetoothcontrol() 
{
  if (Serial.available() > 0) 
  {
    value = Serial.read();
    Serial.println(value);
  }
  if (value == 'F')
   {
     forward();
     //delay()
   } 
   else if (value == 'B') 
   {
    backward();
   } 
   else if (value == 'L') 
   {
    left();
    delay(100);
    forward();
    
   } 
   else if (value == 'R') 
   {
    right();
    delay(100);
    forward();
   } else if (value == 'S') 
   {
    Stop();
   }
 
}
//This is for obstacle avoiding 
void Obstacle() {
  distance = ultrasonic();
  if (distance <= 60) {
  
    backward();
    delay(200);
    Stop();
    
    //delay(50);
    
  } /*else {
    forward();
  }*/
}
//Take text file input from bluetooth serial port after voive is converted to text by google mike using AI/NLP
void voicecontrol() {
  if (Serial.available() > 0) {
    value = Serial.read();
    Serial.println(value);
    if (value == 'f') {
      forward();
    } else if (value == 'b') {
      backward();
    } else if (value == 'l') {
      left();
      delay(800);
      //Obstacle();
      forward();
      
    } else if (value == 'r') {
      
      right();
      //Obstacle();
      delay(800);
      forward();
      
    } else if (value == 's') {
      Stop();
    }
  }
}
// Ultrasonic sensor distance reading function
int ultrasonic() {
digitalWrite(Trig, LOW); //TrigPin 
delayMicroseconds(2); 
digitalWrite(Trig, HIGH); 
delayMicroseconds(10); 
digitalWrite(Trig, LOW); 

//cm = pulseIn(Echo, HIGH) / 58; //Convert the echo time to cm.
long t = pulseIn(Echo, HIGH);
long cm = t / 29 / 2; //time convert distance


return cm;

}
//Command to move forward
void forward() {
  M1.run(FORWARD);
  M3.run(FORWARD);
  
}
//Command to move backward
void backward() {
  M1.run(BACKWARD);
  M3.run(BACKWARD);
  //Obstacle();
}
//Command to move right
void right() {
  M1.run(BACKWARD);
  
  M3.run(FORWARD);
  //Obstacle();
}
//Command to move left
void left() 
{
  M1.run(FORWARD);
  
  M3.run(BACKWARD);
  //Obstacle();
}
void Stop() {
  M1.run(RELEASE);  M3.run(RELEASE);
} 
